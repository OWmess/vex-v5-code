{"mode":"Blocks","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"U`9aA+=)r+L1tzA.)-qi\">myVariable</variable><variable id=\"gQ99]tOt^,YrNIG~2$RN\">r</variable></variables><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"110\"><next><block type=\"v5_control_wait\" id=\"Mu9;g5;p$49#Vz~6Ti1z\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"xrj(Sizl.frye/w3UeZQ\"><field name=\"NUM\">0.5</field></shadow></value><next><block type=\"v5_looks_set_print_precision\" id=\"^P-[D]Kv^KWifdnS^s6w\"><field name=\"TARGET\">Brain</field><field name=\"PRECISION\">2</field><next><block type=\"v5_variables_set_variable\" id=\"0mA:ugQD|sa8y0emk92z\"><field name=\"VARIABLE\" id=\"U`9aA+=)r+L1tzA.)-qi\">myVariable</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"|QT3N$7kimE^vaPJDq%M\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"v5_control_while\" id=\"=@-L0[U=V1(gXFeW%QAn\"><value name=\"CONDITION\"><block type=\"v5_operator_equal_to\" id=\"Gl;V#-.1c?SYK+wHPd51\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"1gCb{{9KeA$Q?wFgY*e/\"><field name=\"NUM\">0</field></shadow><block type=\"v5_variables_variable\" id=\"YBgyG0!r,-Tk_seiX#c{\"><field name=\"VARIABLE\" id=\"U`9aA+=)r+L1tzA.)-qi\">myVariable</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"IMO/38kA3ULAv)9@p:42\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"SUBSTACK\"><block type=\"v5_looks_set_cursor\" id=\"wY7RcEUE.s?k~B_{#Y9i\"><field name=\"TARGET\">Brain</field><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\"t/GA?fvo[i.|=A/$s{6=\"><field name=\"NUM\">1</field></shadow></value><value name=\"COLUMN\"><shadow type=\"math_whole_number\" id=\"#^pJm8jsGzWn2G)nbKT_\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_looks_print\" id=\"!%Bw{xaAX3YWhpHW_:9a\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\"fs9F?r;jmo=OK`!OI{}K\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_rotation_angle\" id=\"YF4#6u%j5k@Tt4XTOo_k\"><field name=\"ROTATION\">Rotation4</field></block></value></block></next></block></statement><next><block type=\"v5_sensing_rotation_set_position\" id=\"U3;hdixmd$@q*rw!-xi5\"><field name=\"ROTATION\">Rotation4</field><value name=\"POSITION\"><shadow type=\"math_number\" id=\"IC0]n]2OsrH/hrsWov]L\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"v5_looks_clear_all_rows\" id=\"Hyg4Xys]FHoQZ3Ti-:SJ\"><field name=\"TARGET\">Brain</field><next><block type=\"v5_looks_print\" id=\"`X;F~b^J4:Q5Bx:V5wgH\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\"88mvhoLw~6zH]eo-yY;?\"><field name=\"TEXT\">calibrated the rotation sensor</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"v5_events_when_brain_screen\" id=\"wiHTzz2YQQAoV#b-)Sq8\" x=\"950\" y=\"150\"><field name=\"EVENTTYPE\">pressed</field><next><block type=\"v5_variables_change_variable\" id=\"mZ{OQ13LlI`WN;HK66X-\"><field name=\"VARIABLE\" id=\"U`9aA+=)r+L1tzA.)-qi\">myVariable</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"]7S((2y,PgJv`5RpnQ?c\"><field name=\"NUM\">1</field></shadow></value></block></next></block></xml>","rconfig":[{"port":[4],"name":"Rotation4","customName":false,"deviceType":"Rotation","deviceClass":"rotation","setting":{"reversed":"true"}}],"slot":7,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.2","minVersion":"3.0.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nrotation Rotation4 = rotation(PORT4, true);\n\n\n\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// Generated code.\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0;\n\nfloat myVariable, r;\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToBrain_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Brain_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  wait(0.5, seconds);\n  Brain_precision = 2;\n  myVariable = 0.0;\n  while ((myVariable == 0.0)) {\n    Brain.Screen.setCursor(1, 1);\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(Rotation4.angle()));\n  wait(5, msec);\n  }\n  Rotation4.setPosition(0.0, degrees);\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"calibrated the rotation sensor\");\n  return 0;\n}\n\n// \"when Brain screen pressed\" hat block\nvoid onevent_Brain_screen_pressed_0() {\n  myVariable = myVariable + 1.0;\n}\n\n\nint main() {\n  // register event handlers\n  Brain.Screen.pressed(onevent_Brain_screen_pressed_0);\n\n  wait(15, msec);\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}